class Solution:
    def kadane(self, nums: List[int]) -> int:
        sum_list = [nums[0]]
        for i in range(1, len(nums)):
            sum_list.append(max(nums[i], nums[i]+sum_list[-1]))
        return max(sum_list)

    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        max_simple = self.kadane(nums)
        if max_simple < 0:
            return max_simple
            
        nums_list_sum = 0
        for i in range(0, len(nums)):
            nums_list_sum += nums[i]
            nums[i] = -nums[i]
        
        max_inverted = self.kadane(nums)
        return max(max_simple, nums_list_sum + max_inverted)

        
        
